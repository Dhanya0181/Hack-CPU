// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the output bits:
 * zr = (out == 0, 1, 0)
 * ng = (out < 0,  1, 0)
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // (out == 0, 1, 0)
        ng;      // (out < 0,  1, 0)

    PARTS:
    //// Replace this comment with your code.
    Mux16(a=x,b=false,sel=zx,out=c1);
    Not16(in=c1,out=nc1);
    
    Mux16(a=y,b=false,sel=zy,out=c2);
    Not16(in=c2,out=nc2);

    Mux16(a=c1,b=nc1,sel=nx,out=c3);
    Mux16(a=c2,b=nc2,sel=ny,out=c4);
    
    And16(a=c3,b=c4,out=c5);
    Add16(a=c3,b=c4,out=c6);
    
    Mux16(a=c5,b=c6,sel=f,out=c7);
    Not16(in=c7,out=nc7);
   
    Mux16(a=c7, b=nc7, sel=no, out=out);

    //, out[0..7]=outlow, out[8..15]=outhi, out[15]=ng);
    

    // Check if the result is negative (the most significant bit is 1)
    And(a=out[15], b=true, out=ng);

    Or8Way(in=out[0..7], out=lowor); //adding 8 bits of out
    Or8Way(in=out[8..15],  out=hior); //adding next 8 bits of out
    Or(a=lowor, b=hior, out=nzr); 
    //combining out , if out=0,them or result will be 0,else if out contains any 1 the result will be 1
    Not(in=nzr, out=zr); //so to get correct zr we take not of it
    
}